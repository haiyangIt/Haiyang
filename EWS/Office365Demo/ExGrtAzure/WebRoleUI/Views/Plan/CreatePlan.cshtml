@model WebRoleUI.Models.PlanViewModel

@{
    ViewBag.Title = "CreatePlan";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>CreatePlan</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>PlanViewModel</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Organization, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Organization, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Organization, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.CredentialInfo, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.PasswordFor(model => model.CredentialInfo, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CredentialInfo, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PlanMailInfos, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PlanMailInfos, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PlanMailInfos, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="button" value="Scheduler" id="Scheduler" class="btn btn-default" />
                <input type="button" value="MailboxSetting" id="MailboxSetting" class="btn btn-default" />
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div class="plan-scheduler hidden">
    <form id="plan_scheduler_form" role="form" class="form-horizontal">
        <div id="plan_scheduler_setting">
            <fieldset>
                <legend>Recurrence</legend>
                <div class="form-group">
                    <div class="col-md-5 col-md-offset-1">
                        <lable class="control-label"><input type="radio" id="Recur_Once" name="RecurType" value="Once" checked="checked" required />&nbsp;Once</lable>
                    </div>
                    <div class="col-md-6">
                        <lable class="control-label"><input type="radio" id="Recur_Recurring" name="RecurType" value="Recurring" required />&nbsp;Recurring</lable>
                    </div>
                </div>
            </fieldset>
            <fieldset>
                <legend>Start</legend>
                <div class="form-group">
                    <div class="col-md-12 plan-scheduler-date-calendar">
                        <input type="text" class="form-control" style="min-width:16.6%" id="startDateCalendar" required />
                    </div>
                    <div class="col-md-12 plan-scheduler-time">
                        <input type="text" class="form-control" style="min-width:16.6%" id="startTimeCalendar" required />
                    </div>
                </div>

                <div class="form-group hidden" id="rec_setting">
                    <label class="control-label col-md-12">Recur every:</label>
                    <div class="col-md-6">
                        <input type="text" id="recValue" name="recValue" class="form-control" required />
                    </div>
                    <div class="col-md-6">
                        <select id="recSpan" required>
                            <option value="minute">Minutes</option>
                            <option value="hour" selected>Hours</option>
                            <option value="day">Days</option>
                            <option value="week">Weeks</option>
                            <option value="month">Months</option>
                        </select>
                    </div>
                </div>
            </fieldset>
        </div>
    </form>
</div>

<div class="plan-mailboxInfo hidden">
    <div class="container">
        <div class="row">
            <div class="col-md-4">
                <div id="mail-list"></div>
            </div>
            <div class="col-md-8">
                <div id="folder-list"></div>
            </div>
        </div>
    </div>
</div>

<div class="plan-admin-setting hidden">
    <div class="form-group">
        <label class="col-md-5 control-label">Admin User:</label>
        <div class="col-md-7">
            <input type="text" id="AdminUser" name="RestoreAdminUser" value="" class="form-control" required email />
        </div>
    </div>
    <div class="form-group">
        <label class="col-md-5 control-label">Admin Password:</label>
        <div class="col-md-7">
            <input type="password" id="AdminPassword" value="" name="RestoreAdminPassword" class="form-control" required />
        </div>
    </div>
</div>

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/bootstrapdialog")
    @Scripts.Render("~/bundles/bottstrapselect")
    @Scripts.Render("~/bundles/arcserveutil")
    @Scripts.Render("~/bundles/three-status-select")
    @Scripts.Render("~/bundles/three-status-select-nav")
    @Scripts.Render("~/bundles/customerPaginator")
    @Scripts.Render("~/bundles/customerMailbox")
    <script>
        $(document).ready(function () {
            ;
            (function ($) {
                var organization = @Model.Organization;

                var result = {};
                result.AdminInfo = {};

                InitScheduler();
                InitAdminSetting();
                InitMailboxSetting();

                function InitScheduler() {

                    var defaultDate = new Date();
                    if(@Model.SchedulerStartTime )
                        defaultDate = Restore.GetDateTime(@Model.SchedulerStartTime);
                    var catalogCalendar = $("#startDateCalendar").datepicker({defaultDate: defaultDate});
                    $("#startTimeCalendar").val($.formatDateTime("hh:ii:ss", defaultDate));

                    var modelDialogHtml = $(".plan-scheduler").html();
                    modelDialogHtml = modelDialogHtml.replace(/(\r\n|\n|\r)/gm, "");
                    $(".plan-scheduler").html("");
                    var formValidator = null;

                    $("#Scheduler").on("click", function () {
                        BootstrapDialog.show({
                            title: "Shedule Setting",
                            message: modelDialogHtml,
                            closeByBackdrop: false,
                            closeByKeyboard: false,
                            cssClass: "plan-scheduler-dialog",
                            buttons: [
                                {
                                    label: "OK",
                                    action: function (selfDialog) {
                                        // todo;
                                        result.RecType = $("[name='RecurType']:checked").val();
                                        result.SchedulerStartTime = 
                                        selfDialog.close();
                                    }
                                },
                                {
                                    label: "Cancel",
                                    action: function (selfDialog) {
                                        selfDialog.close();
                                    }
                                }
                            ],
                            onshown: function (selfDialog) {
                                if ("@Model.RecType" == "0") {
                                    $("#Recur_Once").prop("checked", true);
                                    $("#rec_setting").addClass("hidden");
                                }
                                else {
                                    $("#Recur_Recurring").prop("checked", true);
                                    $("#rec_setting").removeClass("hidden");
                                }

                                $("#recValue").val("@Model.SchedulerRecInterval");
                                $("#recSpan").val("@Model.SchedulerFrequency");

                                $("[name='RecurType']").on("click.restore", function () {
                                    var recType = $("[name='RecurType']:checked").val();
                                    if (recType == "Once") {
                                        $("#rec_setting").addClass("hidden");
                                    }
                                    else if (recType == "Recurring") {
                                        $("#rec_setting").removeClass("hidden");
                                    }
                                });
                            }
                        });
                    });
                }

                function InitAdminSetting() {
                    var modelDialogHtml = $(".plan-admin-setting").html();
                    modelDialogHtml = modelDialogHtml.replace(/(\r\n|\n|\r)/gm, "");
                    $(".plan-admin-setting").html("");
                    $("#CredentialInfo").on("click", function () {
                        BootstrapDialog.show({
                            title: "Admin User Setting",
                            message: modelDialogHtml,
                            closeByBackdrop: false,
                            closeByKeyboard: false,
                            cssClass: "plan-admin-setting-dialog",
                            buttons: [
                                {
                                    label: "OK",
                                    action: function (selfDialog) {
                                        // todo;

                                        selfDialog.close();
                                    }
                                },
                                {
                                    label: "Cancel",
                                    action: function (selfDialog) {
                                        selfDialog.close();
                                    }
                                }
                            ],
                            onShown: function (selfDialog) {
                                $("#AdminUser").val("@Model.AdminInfo.UserName");
                                $("#AdminPassword").val("@Model.AdminInfo.UserPassword");
                            }
                        });
                    })
                }

                function InitMailboxSetting() {
                    var modelDialogHtml = $(".plan-mailboxInfo").html();
                    modelDialogHtml = modelDialogHtml.replace(/(\r\n|\n|\r)/gm, "");
                    $(".plan-mailboxInfo").html("");

                    $("#MailboxSetting").on("click", function () {
                        BootstrapDialog.show({
                            title: "mailbox Setting",
                            message: modelDialogHtml,
                            closeByBackdrop: false,
                            closeByKeyboard: false,
                            cssClass: "plan-mailbox-setting-dialog",
                            buttons: [
                                {
                                    label: "OK",
                                    action: function (selfDialog) {
                                        // todo;

                                        selfDialog.close();
                                    }
                                },
                                {
                                    label: "Cancel",
                                    action: function (selfDialog) {
                                        selfDialog.close();
                                    }
                                }
                            ],
                            onshown: function (selfDialog) {
                                _InitMailboxNav();

                            }
                        });
                    });

                    var selectCacheKey = "Plan_Setting_Select_Cache";
                    var mailboxNav = $("#mail-list").mailboxnav({ cacheKey: selectCacheKey });
                    var folderNav = $("#folder-list").foldernavForSteped({ cacheKey: selectCacheKey });

                    _InitMailboxNav = function (data) {
                        var mailbox = adminMailbox;
                        var password = adminPassword;
                        var org = organization;
                        //var data = { mailbox: mailbox, password: password, organization: org };
                        var url = "@Url.Action("GetAllMailbox", "Backup")";

                        mailboxNav.mailboxnav("update", { url: url, data: data });
                    };

                    var currentSelectMailbox = "";
                    mailboxNav.on("onSelect", function (e, item) {
                        currentSelectMailbox = item.Id;

                        var mailbox = adminMailbox;
                        var password = adminPassword;
                        var org = organization;
                        folderNav.foldernavForSteped("setRootFolderId", item.Id);

                        folderNav.foldernavForSteped("update", {
                            url: "@Url.Action("GetFolderInMailbox")",
                            data: { adminMailbox: mailbox, password: password, organization: org, mailbox: item.Id, parentFolderId: "0" }
                        });
                    });

                    folderNav.on("onOpenAndGetChildData", function (e, data) {
                        var parentId = data.item.Id;
                        var mailbox = adminMailbox;
                        var password = adminPassword;
                        var org = organization;

                        var data = {
                            adminMailbox: mailbox,
                            password: password,
                            organization: org,
                            mailbox: currentSelectMailbox,
                            parentFolderId: data.item.Id
                        };

                        Arcserve.DataProtect.Util.Post(data, "@Url.Action("GetFolderInMailbox", "Backup")", function (data) {
                            //debugger;
                            folderNav.foldernavForSteped("updateChildContainer", parentId, data.Details);
                        })
                    });
                }

            });
        });
    </script>
}
