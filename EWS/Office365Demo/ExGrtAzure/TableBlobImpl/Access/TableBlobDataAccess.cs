using System;
using Microsoft.WindowsAzure.Storage;
using Microsoft.WindowsAzure.Storage.Table;
using System.Configuration;
using Microsoft.Exchange.WebServices.Data;
using Microsoft.WindowsAzure.Storage.Blob;
using System.IO;
using DataProtectInterface;
using TableBlobImpl.Access.Blob;
using EwsDataInterface;
using TableBlobImpl.Storage.Table.Model;
using TableBlobImpl.Access.Table;
using EwsFrame;
using System.Data.Entity;

namespace TableBlobImpl.Access
{

    /// <summary>
    /// Save the mailbox information, folder information and item catalog information to the Table.
    /// Save the item data to the blob.
    /// </summary>
    /// <remarks>
    /// 1. Create a table named orginazation to save all mailbox information. 
    /// 2. For each mailbox, Create a table whose name is generated by mailboxName to save all mailbox's folder information. tableName: "OrgName_Mail_TimeTicks"
    /// 3. For each folder, Create a table whose name is generated by orgnization name and folder id to save all items in the folder. tableName: "OrgName_MailAddress_TimeTicks"
    /// 4. For each item, Create a blob whose name is generated by orgnization name and item id to save item content. tableName:"OrgName_FolderId_TimeTicks"
    /// 
    /// 5. For each folder and item, we only save the item whose create time is between last catalog time and current catalog start time.
    /// </remarks>
    public class TableBlobDataAccess : ICatalogDataAccess
    {
        private static CloudStorageAccount StorageAccount = FactoryBase.GetStorageAccount();

        internal static CloudTableClient TableClient = StorageAccount.CreateCloudTableClient();

        internal static CloudBlobClient BlobClient = StorageAccount.CreateCloudBlobClient();

        public readonly BlobDataAccess BlobDataAccessObj = new BlobDataAccess(BlobClient);

        public DbContext DbContext
        {
            get
            {
                throw new NotImplementedException();
            }
        }

        public object OtherObj
        {
            set
            {
                throw new NotImplementedException();
            }
        }

        public void SaveMailbox(IMailboxData mailboxAddress)
        {
            MailboxEntity entity = mailboxAddress as MailboxEntity;
            if (entity == null)
                throw new NullReferenceException("mailboxEntity");

            string tableName = TableDataAccess.ValidateTableName(MailboxEntity.GetMailTableName(entity.OrganizationName, entity.StartTime));
            TableDataAccess tableDataAccess = new TableDataAccess(TableClient);
            CloudTable table = tableDataAccess.CreateIfNotExist(tableName);

            TableResult tableResult = tableDataAccess.InsertEntity(table, entity);
            LogFactory.LogInstance.WriteLog(LogInterface.LogLevel.DEBUG, "Insert mailbox to table", "Insert mailbox {0} to table {1} result, Etag:{2}, HttpStatusCode:{3},",
                mailboxAddress.DisplayName, tableName, tableResult.Etag, tableResult.HttpStatusCode);
        }

        public void SaveFolder(IFolderData folder, IMailboxData mailboxData, IFolderData parentFolder)
        {
            FolderEntity entity = folder as FolderEntity;
            if (entity == null)
                throw new NullReferenceException("FolderEntity");
            MailboxEntity mailboxEntity = mailboxData as MailboxEntity;
            if (mailboxEntity == null)
                throw new NullReferenceException("mailboxEntity");

            string orignizeName = mailboxEntity.OrganizationName;
            string tableName = FolderEntity.GetFolderTableName(orignizeName, mailboxData.MailAddress, entity.StartTime);
            tableName = TableDataAccess.ValidateTableName(tableName);
            TableDataAccess tableDataAccess = new TableDataAccess(TableClient);
            CloudTable table = tableDataAccess.CreateIfNotExist(tableName);

            entity.Location = tableName;

            TableResult tableResult = tableDataAccess.InsertEntity(table, entity);
            LogFactory.LogInstance.WriteLog(LogInterface.LogLevel.DEBUG, "Insert folder to table", "Insert folder {0} to table {1} result, Etag:{2}, HttpStatusCode:{3},",
                ((IItemBase)folder).DisplayName, tableName, tableResult.Etag, tableResult.HttpStatusCode);
        }

        public void SaveItem(IItemData item, IMailboxData mailboxData, IFolderData parentFolderData)
        {
            ItemEntity entity = item as ItemEntity;
            if (entity == null)
                throw new NullReferenceException("ItemEntity");

            MailboxEntity mailboxEntity = mailboxData as MailboxEntity;
            if (mailboxEntity == null)
                throw new NullReferenceException("mailboxEntity");

            string orignizeName = mailboxEntity.OrganizationName;
            string tableName = ItemEntity.GetItemTableName(orignizeName, parentFolderData.FolderId, entity.StartTime);
            tableName = TableDataAccess.ValidateTableName(tableName);
            TableDataAccess tableDataAccess = new TableDataAccess(TableClient);
            CloudTable table = tableDataAccess.CreateIfNotExist(tableName);

            TableResult tableResult = tableDataAccess.InsertEntity(table, entity);
            LogFactory.LogInstance.WriteLog(LogInterface.LogLevel.DEBUG, "Insert item to table", "Insert item {0} to table {1} result, Etag:{2}, HttpStatusCode:{3},",
                item.DisplayName, tableName, tableResult.Etag, tableResult.HttpStatusCode);
        }

        public void SaveItemContent(IItemData item, string mailboxAddress, DateTime startTime, bool isCheckExist = false, bool isExist = false)
        {
            // todo undo the comment.
            //Item itemInEws = item.Data as Item;
            //byte[] buffer = new byte[itemInEws.Size];

            //var itemOper = CatalogFactory.Instance.NewItemOperatorImpl(itemInEws.Service, null);
            //IServiceContext context = CatalogFactory.Instance.GetServiceContext();
            //TableDataAccess tableDataAccess = new TableDataAccess(TableClient);
            //using (MemoryStream stream = new MemoryStream(buffer))
            //{
            //    itemOper.ExportItem(itemInEws, stream, context.Argument);
            //    stream.Seek(0, SeekOrigin.Begin);

            //    var location = ItemLocationEntity.GetLocation(itemInEws, startTime, true);
            //    var locationTableEntity = ItemLocationEntity.NewItemLocationEntity(item.ItemId, item.ParentFolderId, location);
            //    BlobDataAccessObj.SaveBlob(location, item.ItemId, stream);

            //    string locationTableName = ItemLocationEntity.GetItemLocationTableName(context.AdminInfo.OrganizationName, item.ParentFolderId);
            //    locationTableName = TableDataAccess.ValidateTableName(locationTableName);
            //    CloudTable locationTable = tableDataAccess.CreateIfNotExist(locationTableName);
            //    TableResult locationTableResult = tableDataAccess.InsertEntity(locationTable, locationTableEntity);
            //    LogFactory.LogInstance.WriteLog(LogInterface.LogLevel.DEBUG, "Insert item to table", "Insert item {0} to table {1} result, Etag:{2}, HttpStatusCode:{3},",
            //        item.DisplayName, locationTableName, locationTableResult.Etag, locationTableResult.HttpStatusCode);
            //}
        }

        public void SaveCatalogJob(ICatalogJob service)
        {
            //todo undo the comment
            //var catalogEntity = service as CatalogEntity;
            //if (catalogEntity == null)
            //    throw new ArgumentNullException("CatalogEntity.");

            //IServiceContext context = CatalogFactory.Instance.GetServiceContext();
            
            //string orignizeName = context.AdminInfo.OrganizationName;
            //string tableName = CatalogEntity.GetCatalogJobTableName(orignizeName);
            //tableName = TableDataAccess.ValidateTableName(tableName);
            //TableDataAccess tableDataAccess = new TableDataAccess(TableClient);
            //CloudTable table = tableDataAccess.CreateIfNotExist(tableName);

            //TableResult tableResult = tableDataAccess.InsertEntity(table, catalogEntity);
            //LogFactory.LogInstance.WriteLog(LogInterface.LogLevel.DEBUG, "Insert catalog job to table", "Insert catalog job {0} to table {1} result, Etag:{2}, HttpStatusCode:{3},",
            //    catalogEntity.CatalogJobName, tableName, tableResult.Etag, tableResult.HttpStatusCode);
        }

        public ICatalogJob GetLastCatalogJob(DateTime thisJobStartTime)
        {
            //todo undo the comment
            //IServiceContext context = CatalogFactory.Instance.GetServiceContext();
            //string orignizeName = context.AdminInfo.OrganizationName;
            //string tableName = CatalogEntity.GetCatalogJobTableName(orignizeName);
            //tableName = TableDataAccess.ValidateTableName(tableName);
            //TableDataAccess tableDataAccess = new TableDataAccess(TableClient);
            //CloudTable table = tableDataAccess.CreateIfNotExist(tableName);

            //TableQuery<CatalogEntity> query = new TableQuery<CatalogEntity>().Where(TableQuery.GenerateFilterCondition("PartitionKey", QueryComparisons.Equal, orignizeName));
            //query.TakeCount = 1;

            //var result = table.ExecuteQuery(query);
            
            //foreach(CatalogEntity entity in result)
            //{
            //    CatalogEntity.SetOtherByPartitionRowKeys(entity);
            //    return entity;
            //}
            return null;
        }

        public void BeginTransaction()
        {
            throw new NotImplementedException();
        }

        public void EndTransaction(bool isCommit)
        {
            throw new NotImplementedException();
        }

        public void ResetAllStorage(string mailboxAddress, string organization)
        {
            throw new NotImplementedException();
        }

        public void ResetAllStorage(string mailboxAddress)
        {
            throw new NotImplementedException();
        }

        public bool IsItemContentExist(string itemId)
        {
            throw new NotImplementedException();
        }

        public void Dispose()
        {
            throw new NotImplementedException();
        }

        public void UpdateFolderChildFolderItemCount(IFolderData folderData, DateTime startTime)
        {
            throw new NotImplementedException();
        }

        public void UpdateMailboxChildFolderCount(IMailboxData mailboxData, DateTime startTime)
        {
            throw new NotImplementedException();
        }

        public void SaveChanges()
        {
            throw new NotImplementedException();
        }
    }
}